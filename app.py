import os
import base64
import tempfile
import pandas as pd
import streamlit as st

# =========================
# Page Config
# =========================
st.set_page_config(
    page_title="üìä DataViz AI",
    page_icon="üìä",
    layout="wide",
)

# =========================
# Custom Styles (mobile friendly, light UI)
# =========================
st.markdown("""
<style>
/* Global */
html, body, .main {
    background: linear-gradient(180deg, #f7faff 0%, #ffffff 100%) !important;
}
.block-container {
    padding-top: 1rem;
    padding-bottom: 2rem;
    max-width: 1000px;
}

/* Hero Section */
.hero {
    background: linear-gradient(135deg, #e0f2fe, #f0f9ff);
    padding: 1.5rem;
    border-radius: 20px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.06);
    text-align: center;
}
.hero h1 {
    font-size: clamp(24px, 4.2vw, 38px);
    margin-bottom: .3rem;
    color: #0f172a;
    font-weight: 700;
}
.hero p {
    font-size: clamp(14px, 2.8vw, 17px);
    color: #334155;
    margin-top: 0;
}

/* Cards */
.card {
    background: #ffffff;
    border-radius: 16px;
    padding: 1rem 1.25rem;
    box-shadow: 0 4px 18px rgba(0,0,0,0.05);
    margin-top: 1rem;
}

/* Buttons */
.stButton>button {
    width: 100%;
    border-radius: 10px;
    padding: .8rem 1rem;
    font-size: 1rem;
    font-weight: 600;
    color: #ffffff;
    background: linear-gradient(90deg, #2563eb, #1e40af);
    border: none;
    box-shadow: 0 4px 10px rgba(37,99,235,0.4);
    transition: transform .1s ease-in-out;
}
.stButton>button:hover {
    transform: translateY(-2px);
}

/* Dataframe */
[data-testid="stDataFrame"] {
    border: 1px solid #e2e8f0;
    border-radius: 12px;
}

/* Expander */
.streamlit-expanderHeader {
    font-size: 1rem;
    font-weight: 600;
    color: #1e293b;
}

/* Footer */
.footer {
    text-align: center;
    margin-top: 2rem;
    color: #64748b;
    font-size: .9rem;
}
</style>
""", unsafe_allow_html=True)

# =========================
# Set API key from secrets
# =========================
if "OPENAI_API_KEY" in st.secrets:
    os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]

# =========================
# Imports for LIDA
# =========================
LIDA_READY = True
try:
    from lida import Manager
    from llmx import llm
except Exception as e:
    LIDA_READY = False
    INIT_ERROR = e


# =========================
# LIDA Helpers
# =========================
def run_lida_once(manager, csv_path, user_goal):
    summary = manager.summarize(csv_path)
    goal = {
        "question": user_goal,
        "visualization": (
            "Generate a single Matplotlib visualization that answers the question. "
            "If necessary, perform data transformations (groupby, filtering, aggregation, resampling weekly/monthly/quarterly)."
        ),
        "rationale": "Briefly justify the visualization and transformations."
    }
    charts = manager.visualize(summary=summary, goal=goal, library="matplotlib")
    if not charts:
        return None, ""
    chart = charts[0]
    return getattr(chart, "raster", None), getattr(chart, "code", "")

def run_lida(csv_path, prompt):
    manager = Manager(text_gen=llm("openai", model="gpt-4o-mini"))
    raster, code = run_lida_once(manager, csv_path, prompt)
    if raster is not None:
        return raster, code, "primary"
    guided = f"{prompt}. Perform required transformations first, then plot a clear Matplotlib chart."
    raster, code = run_lida_once(manager, csv_path, guided)
    return raster, code, ("fallback" if raster is not None else "none")

def decode_raster(raster):
    if raster is None:
        return None
    if isinstance(raster, bytes):
        return raster
    if isinstance(raster, str):
        try:
            return base64.b64decode(raster)
        except Exception:
            return None
    return None


# =========================
# Hero Section
# =========================
st.markdown("""
<div class="hero">
    <h1>üìä DataViz AI</h1>
    <p>Upload a CSV or Excel ‚Üí Ask a question ‚Üí Get a ready-to-use chart generated by AI.</p>
</div>
""", unsafe_allow_html=True)

if not LIDA_READY:
    st.error("‚ùå LIDA is not installed. Run:")
    st.code("pip install lida llmx openai", language="bash")
    st.stop()

# =========================
# Upload + Input
# =========================
with st.container():
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    uploaded = st.file_uploader("üì§ Upload CSV or Excel file", type=["csv", "xlsx", "xls"])
    sheet = None
    if uploaded and uploaded.name.lower().endswith((".xlsx", ".xls")):
        try:
            xls = pd.ExcelFile(uploaded)
            sheet = st.selectbox("Select sheet", options=xls.sheet_names, index=0)
            uploaded.seek(0)
        except Exception:
            pass
    st.markdown("</div>", unsafe_allow_html=True)

with st.container():
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    prompt = st.text_input("‚ùì What do you want to visualize?", placeholder="e.g., Monthly revenue trend by region")
    st.markdown("</div>", unsafe_allow_html=True)

can_generate = uploaded is not None and prompt.strip() != ""
st.markdown("<div class='card'>", unsafe_allow_html=True)
generate = st.button("üöÄ Generate Visualization", disabled=not can_generate)
st.markdown("</div>", unsafe_allow_html=True)

# =========================
# Output
# =========================
if generate:
    try:
        if uploaded.name.lower().endswith(".csv"):
            df = pd.read_csv(uploaded)
        else:
            df = pd.read_excel(uploaded, sheet_name=sheet if sheet else 0)

        if df.empty:
            st.warning("‚ö†Ô∏è File seems empty. Try another dataset.")
            st.stop()

        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("üìä Data Preview")
        st.dataframe(df.head(10), use_container_width=True)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp:
            df.to_csv(tmp.name, index=False)
            csv_path = tmp.name

        with st.spinner("ü§ñ Generating visualization with GPT-4o-mini..."):
            raster, code, attempt = run_lida(csv_path, prompt)

        os.unlink(csv_path)
        raster_bytes = decode_raster(raster)

        st.subheader("üìà Visualization")
        if raster_bytes is not None:
            st.image(raster_bytes, caption=f"LIDA Visualization ({attempt} attempt)", use_container_width=True)
            with st.expander("üß† View Generated Code"):
                st.code(code or "# No code returned", language="python")
            st.success("‚úÖ Visualization generated successfully!")
        else:
            st.error("‚ùå Could not generate visualization. Try rephrasing the question or using a dataset with numeric columns.")

        st.markdown("</div>", unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error: {e}")

# =========================
# Footer
# =========================
st.markdown("<div class='footer'>Made with ‚ù§Ô∏è using LIDA + GPT-4o-mini ‚Ä¢ Mobile optimized</div>", unsafe_allow_html=True)
